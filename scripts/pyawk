#! /usr/bin/env python3

import sys
from functools import reduce

from collections import Counter
import numpy as np

def error(msg):
	print("ERROR: " + msg, file=sys.stderr)
	sys.exit(1)

if len(sys.argv) <= 1:
	error("Usage: pyawk [m:map expr] [f:filter expr] [r:reduce-expr]")

map_expr = None
filter_expr = None
reduce_expr = None
for arg in sys.argv[1:]:
	if arg.startswith("m:"):
		map_expr = arg[2:]
	elif arg.startswith("f:"):
		filter_expr = arg[2:]
	elif arg.startswith("r:"):
		reduce_expr = arg[2:]
	else:
		error("Invalid argument. {} is not prefixed with \"[mfr]:\".".format(arg))

input_lines = [ln.strip() for ln in sys.stdin]
if map_expr is not None:
	if map_expr.isidentifier():
		map_func_template = "map_func = {}"

	elif "return" in map_expr:
		map_func_template = (
			"def map_func(x):"
			"	{}")

	else:
		map_func_template = (
			"def map_func(x):"
			"	return {}")

	map_func_str = map_func_template.format(map_expr)
	exec(map_func_str)
	input_lines = [map_func(x) for x in input_lines]

if filter_expr is not None:
	if filter_expr.isidentifier():
		filter_func_template = "filter_func = {}"

	elif "return" in filter_expr:
		filter_func_template = (
			"def filter_func(x):"
			"	{}")

	else:
		filter_func_template = (
			"def filter_func(x):"
			"	return {}")

	filter_func_str = filter_func_template.format(filter_expr)
	exec(filter_func_str)
	input_lines = [x for x in input_lines if filter_func(x)]

if reduce_expr is not None:
	if reduce_expr.isidentifier():
		reduce_func_template = "reduce_func = {}"

	elif "return" in reduce_expr:
		reduce_func_template = (
			"def reduce_func(xs):"
				"{}")
	else:
		reduce_func_template = (
			"def reduce_func(xs):"
				"return {}")

	exec(reduce_func_template.format(reduce_expr))
	input_lines = [reduce_func(input_lines)]

for result in input_lines:
	print(result)
